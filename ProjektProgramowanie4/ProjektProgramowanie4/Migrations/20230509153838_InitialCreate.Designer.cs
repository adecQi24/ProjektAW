// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ProjektProgramowanie4.Models;

#nullable disable

namespace ProjektProgramowanie4.Migrations
{
    [DbContext(typeof(KartaPojazduContext))]
    [Migration("20230509153838_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ProjektProgramowanie4.Models.Ewidencje", b =>
                {
                    b.Property<int>("IdEwidencji")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdEwidencji"));

                    b.Property<DateTime>("DataRozpoczecia")
                        .HasColumnType("date");

                    b.Property<DateTime>("DataZakonczenia")
                        .HasColumnType("date");

                    b.Property<int>("IdLiczby")
                        .HasColumnType("int");

                    b.Property<int>("IdWpisu")
                        .HasColumnType("int");

                    b.Property<int>("StanLicznikaKoncowy")
                        .HasColumnType("int");

                    b.Property<int>("StanLicznikaPoczatkowy")
                        .HasColumnType("int");

                    b.HasKey("IdEwidencji");

                    b.HasIndex("IdLiczby");

                    b.HasIndex("IdWpisu");

                    b.ToTable("Ewidencje", (string)null);
                });

            modelBuilder.Entity("ProjektProgramowanie4.Models.LiczbaKilometrow", b =>
                {
                    b.Property<int>("IdLiczby")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdLiczby"));

                    b.Property<int>("LiczbaKmKoncowa")
                        .HasColumnType("int");

                    b.HasKey("IdLiczby");

                    b.ToTable("Liczba_Kilometrow", (string)null);
                });

            modelBuilder.Entity("ProjektProgramowanie4.Models.OsobyKierujace", b =>
                {
                    b.Property<int>("IdOsoby")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdOsoby"));

                    b.Property<string>("Adres")
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.Property<string>("Imie")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("Nazwisko")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("IdOsoby");

                    b.ToTable("Osoby_Kierujace", (string)null);
                });

            modelBuilder.Entity("ProjektProgramowanie4.Models.Pojazdy", b =>
                {
                    b.Property<string>("NrRejestracyjny")
                        .HasMaxLength(7)
                        .HasColumnType("nvarchar(7)");

                    b.Property<int?>("IdEwidencji")
                        .HasColumnType("int");

                    b.Property<string>("MarkaPojazdu")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("RodzajPojazdu")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("NrRejestracyjny");

                    b.HasIndex("IdEwidencji");

                    b.ToTable("Pojazdy", (string)null);
                });

            modelBuilder.Entity("ProjektProgramowanie4.Models.Wpisy", b =>
                {
                    b.Property<int>("IdWpisu")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdWpisu"));

                    b.Property<DateTime>("DataWyjazdu")
                        .HasColumnType("date");

                    b.Property<int>("IdLiczby")
                        .HasColumnType("int");

                    b.Property<int>("IdOsoby")
                        .HasColumnType("int");

                    b.Property<int>("KolejnyNrWpisu")
                        .HasColumnType("int");

                    b.Property<int>("LiczbaPrzejechanychKm")
                        .HasColumnType("int");

                    b.Property<string>("OpisTrasy")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("opis_trasy");

                    b.HasKey("IdWpisu");

                    b.HasIndex("IdLiczby");

                    b.HasIndex("IdOsoby");

                    b.ToTable("Wpisy", (string)null);
                });

            modelBuilder.Entity("ProjektProgramowanie4.Models.Ewidencje", b =>
                {
                    b.HasOne("ProjektProgramowanie4.Models.LiczbaKilometrow", "IdLiczbyNavigation")
                        .WithMany("Ewidencje")
                        .HasForeignKey("IdLiczby")
                        .IsRequired()
                        .HasConstraintName("FK_Ewidencje_Liczba_Kilometrow");

                    b.HasOne("ProjektProgramowanie4.Models.Wpisy", "IdWpisuNavigation")
                        .WithMany("Ewidencje")
                        .HasForeignKey("IdWpisu")
                        .IsRequired()
                        .HasConstraintName("FK_Ewidencje_Wpisy");

                    b.Navigation("IdLiczbyNavigation");

                    b.Navigation("IdWpisuNavigation");
                });

            modelBuilder.Entity("ProjektProgramowanie4.Models.Pojazdy", b =>
                {
                    b.HasOne("ProjektProgramowanie4.Models.Ewidencje", "IdEwidencjiNavigation")
                        .WithMany("Pojazdy")
                        .HasForeignKey("IdEwidencji")
                        .HasConstraintName("FK_Pojazdy_Ewidencje");

                    b.Navigation("IdEwidencjiNavigation");
                });

            modelBuilder.Entity("ProjektProgramowanie4.Models.Wpisy", b =>
                {
                    b.HasOne("ProjektProgramowanie4.Models.LiczbaKilometrow", "IdLiczbyNavigation")
                        .WithMany("Wpisy")
                        .HasForeignKey("IdLiczby")
                        .IsRequired()
                        .HasConstraintName("FK_Wpisy_Liczba_Kilometrow");

                    b.HasOne("ProjektProgramowanie4.Models.OsobyKierujace", "IdOsobyNavigation")
                        .WithMany("Wpisy")
                        .HasForeignKey("IdOsoby")
                        .IsRequired()
                        .HasConstraintName("FK_Wpisy_Osoby_Kierujace");

                    b.Navigation("IdLiczbyNavigation");

                    b.Navigation("IdOsobyNavigation");
                });

            modelBuilder.Entity("ProjektProgramowanie4.Models.Ewidencje", b =>
                {
                    b.Navigation("Pojazdy");
                });

            modelBuilder.Entity("ProjektProgramowanie4.Models.LiczbaKilometrow", b =>
                {
                    b.Navigation("Ewidencje");

                    b.Navigation("Wpisy");
                });

            modelBuilder.Entity("ProjektProgramowanie4.Models.OsobyKierujace", b =>
                {
                    b.Navigation("Wpisy");
                });

            modelBuilder.Entity("ProjektProgramowanie4.Models.Wpisy", b =>
                {
                    b.Navigation("Ewidencje");
                });
#pragma warning restore 612, 618
        }
    }
}
